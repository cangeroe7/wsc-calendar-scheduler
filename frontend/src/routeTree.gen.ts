/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ScheduleIdentifierImport } from './routes/$scheduleIdentifier'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as AdminMeetingsIndexImport } from './routes/admin/meetings/index'
import { Route as FacultyIdentifierEventIdentifierIndexImport } from './routes/$facultyIdentifier/$eventIdentifier/index'
import { Route as DashboardScheduleFacultyIdImport } from './routes/dashboard/schedule/$facultyId'
import { Route as AdminAvailabilityScheduleIndexImport } from './routes/admin/availability/schedule/index'
import { Route as AdminAvailabilityScheduleScheduleIdImport } from './routes/admin/availability/schedule/$scheduleId'

// Create/Update Routes

const ScheduleIdentifierRoute = ScheduleIdentifierImport.update({
  id: '/$scheduleIdentifier',
  path: '/$scheduleIdentifier',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRoute,
} as any)

const AdminMeetingsIndexRoute = AdminMeetingsIndexImport.update({
  id: '/admin/meetings/',
  path: '/admin/meetings/',
  getParentRoute: () => rootRoute,
} as any)

const FacultyIdentifierEventIdentifierIndexRoute =
  FacultyIdentifierEventIdentifierIndexImport.update({
    id: '/$facultyIdentifier/$eventIdentifier/',
    path: '/$facultyIdentifier/$eventIdentifier/',
    getParentRoute: () => rootRoute,
  } as any)

const DashboardScheduleFacultyIdRoute = DashboardScheduleFacultyIdImport.update(
  {
    id: '/dashboard/schedule/$facultyId',
    path: '/dashboard/schedule/$facultyId',
    getParentRoute: () => rootRoute,
  } as any,
)

const AdminAvailabilityScheduleIndexRoute =
  AdminAvailabilityScheduleIndexImport.update({
    id: '/admin/availability/schedule/',
    path: '/admin/availability/schedule/',
    getParentRoute: () => rootRoute,
  } as any)

const AdminAvailabilityScheduleScheduleIdRoute =
  AdminAvailabilityScheduleScheduleIdImport.update({
    id: '/admin/availability/schedule/$scheduleId',
    path: '/admin/availability/schedule/$scheduleId',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$scheduleIdentifier': {
      id: '/$scheduleIdentifier'
      path: '/$scheduleIdentifier'
      fullPath: '/$scheduleIdentifier'
      preLoaderRoute: typeof ScheduleIdentifierImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/schedule/$facultyId': {
      id: '/dashboard/schedule/$facultyId'
      path: '/dashboard/schedule/$facultyId'
      fullPath: '/dashboard/schedule/$facultyId'
      preLoaderRoute: typeof DashboardScheduleFacultyIdImport
      parentRoute: typeof rootRoute
    }
    '/$facultyIdentifier/$eventIdentifier/': {
      id: '/$facultyIdentifier/$eventIdentifier/'
      path: '/$facultyIdentifier/$eventIdentifier'
      fullPath: '/$facultyIdentifier/$eventIdentifier'
      preLoaderRoute: typeof FacultyIdentifierEventIdentifierIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/meetings/': {
      id: '/admin/meetings/'
      path: '/admin/meetings'
      fullPath: '/admin/meetings'
      preLoaderRoute: typeof AdminMeetingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/availability/schedule/$scheduleId': {
      id: '/admin/availability/schedule/$scheduleId'
      path: '/admin/availability/schedule/$scheduleId'
      fullPath: '/admin/availability/schedule/$scheduleId'
      preLoaderRoute: typeof AdminAvailabilityScheduleScheduleIdImport
      parentRoute: typeof rootRoute
    }
    '/admin/availability/schedule/': {
      id: '/admin/availability/schedule/'
      path: '/admin/availability/schedule'
      fullPath: '/admin/availability/schedule'
      preLoaderRoute: typeof AdminAvailabilityScheduleIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$scheduleIdentifier': typeof ScheduleIdentifierRoute
  '/admin': typeof AdminIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/schedule/$facultyId': typeof DashboardScheduleFacultyIdRoute
  '/$facultyIdentifier/$eventIdentifier': typeof FacultyIdentifierEventIdentifierIndexRoute
  '/admin/meetings': typeof AdminMeetingsIndexRoute
  '/admin/availability/schedule/$scheduleId': typeof AdminAvailabilityScheduleScheduleIdRoute
  '/admin/availability/schedule': typeof AdminAvailabilityScheduleIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$scheduleIdentifier': typeof ScheduleIdentifierRoute
  '/admin': typeof AdminIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/schedule/$facultyId': typeof DashboardScheduleFacultyIdRoute
  '/$facultyIdentifier/$eventIdentifier': typeof FacultyIdentifierEventIdentifierIndexRoute
  '/admin/meetings': typeof AdminMeetingsIndexRoute
  '/admin/availability/schedule/$scheduleId': typeof AdminAvailabilityScheduleScheduleIdRoute
  '/admin/availability/schedule': typeof AdminAvailabilityScheduleIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$scheduleIdentifier': typeof ScheduleIdentifierRoute
  '/admin/': typeof AdminIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/schedule/$facultyId': typeof DashboardScheduleFacultyIdRoute
  '/$facultyIdentifier/$eventIdentifier/': typeof FacultyIdentifierEventIdentifierIndexRoute
  '/admin/meetings/': typeof AdminMeetingsIndexRoute
  '/admin/availability/schedule/$scheduleId': typeof AdminAvailabilityScheduleScheduleIdRoute
  '/admin/availability/schedule/': typeof AdminAvailabilityScheduleIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$scheduleIdentifier'
    | '/admin'
    | '/dashboard'
    | '/dashboard/schedule/$facultyId'
    | '/$facultyIdentifier/$eventIdentifier'
    | '/admin/meetings'
    | '/admin/availability/schedule/$scheduleId'
    | '/admin/availability/schedule'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$scheduleIdentifier'
    | '/admin'
    | '/dashboard'
    | '/dashboard/schedule/$facultyId'
    | '/$facultyIdentifier/$eventIdentifier'
    | '/admin/meetings'
    | '/admin/availability/schedule/$scheduleId'
    | '/admin/availability/schedule'
  id:
    | '__root__'
    | '/'
    | '/$scheduleIdentifier'
    | '/admin/'
    | '/dashboard/'
    | '/dashboard/schedule/$facultyId'
    | '/$facultyIdentifier/$eventIdentifier/'
    | '/admin/meetings/'
    | '/admin/availability/schedule/$scheduleId'
    | '/admin/availability/schedule/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ScheduleIdentifierRoute: typeof ScheduleIdentifierRoute
  AdminIndexRoute: typeof AdminIndexRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardScheduleFacultyIdRoute: typeof DashboardScheduleFacultyIdRoute
  FacultyIdentifierEventIdentifierIndexRoute: typeof FacultyIdentifierEventIdentifierIndexRoute
  AdminMeetingsIndexRoute: typeof AdminMeetingsIndexRoute
  AdminAvailabilityScheduleScheduleIdRoute: typeof AdminAvailabilityScheduleScheduleIdRoute
  AdminAvailabilityScheduleIndexRoute: typeof AdminAvailabilityScheduleIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ScheduleIdentifierRoute: ScheduleIdentifierRoute,
  AdminIndexRoute: AdminIndexRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardScheduleFacultyIdRoute: DashboardScheduleFacultyIdRoute,
  FacultyIdentifierEventIdentifierIndexRoute:
    FacultyIdentifierEventIdentifierIndexRoute,
  AdminMeetingsIndexRoute: AdminMeetingsIndexRoute,
  AdminAvailabilityScheduleScheduleIdRoute:
    AdminAvailabilityScheduleScheduleIdRoute,
  AdminAvailabilityScheduleIndexRoute: AdminAvailabilityScheduleIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$scheduleIdentifier",
        "/admin/",
        "/dashboard/",
        "/dashboard/schedule/$facultyId",
        "/$facultyIdentifier/$eventIdentifier/",
        "/admin/meetings/",
        "/admin/availability/schedule/$scheduleId",
        "/admin/availability/schedule/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$scheduleIdentifier": {
      "filePath": "$scheduleIdentifier.tsx"
    },
    "/admin/": {
      "filePath": "admin/index.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx"
    },
    "/dashboard/schedule/$facultyId": {
      "filePath": "dashboard/schedule/$facultyId.tsx"
    },
    "/$facultyIdentifier/$eventIdentifier/": {
      "filePath": "$facultyIdentifier/$eventIdentifier/index.tsx"
    },
    "/admin/meetings/": {
      "filePath": "admin/meetings/index.tsx"
    },
    "/admin/availability/schedule/$scheduleId": {
      "filePath": "admin/availability/schedule/$scheduleId.tsx"
    },
    "/admin/availability/schedule/": {
      "filePath": "admin/availability/schedule/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
